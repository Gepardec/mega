kind: "Template"
apiVersion: "v1"
metadata:
  name: "SwaggerUI"
  annotations:
    openshift.io/display-name: "SwaggerUI"
    description: "SwaggerUI instance"

parameters:
  - name: "SERVICE_NAME"
    displayName: "Service name"
    description: "The name of the Swagger-UI service"
    required: true

  - name: "IMAGE"
    displayName: "Image"
    description: "The image of the Swagger-UI to use"
    required: true

  - name: "APP"
    displayName: "Application"
    description: "The name for the label app"
    required: true

objects:
  - kind: "DeploymentConfig"
    apiVersion: "v1"
    metadata:
      name: "${SERVICE_NAME}"
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      labels:
        app: "${APP}"
        service: "${SERVICE_NAME}"
    spec:
      strategy:
        type: "Rolling"
      replicas: "1"
      selector:
        name: "${SERVICE_NAME}"
      triggers:
        - type: "ConfigChange"
      template:
        metadata:
          labels:
            name: "${SERVICE_NAME}"
        spec:
          containers:
            - name: "${SERVICE_NAME}"
              image: "${IMAGE}"
              imagePullPolicy: Always
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                successThreshold: 1
                failureThreshold: 5
                timeoutSeconds: 5
                initialDelaySeconds: 10
                periodSeconds: 5
                httpGet:
                  path: /
                  port: 8080
                  scheme: HTTP
              livenessProbe:
                successThreshold: 1
                failureThreshold: 5
                timeoutSeconds: 5
                initialDelaySeconds: 10
                periodSeconds: 5
                httpGet:
                  path: /
                  port: 8080
                  scheme: HTTP
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "256Mi"
                  cpu: "500m"
              terminationMessagePath: "/dev/termination.log"
              capabilities:
                securityContext:
                  capabilities:
                    privileged: false

  - kind: "Service"
    apiVersion: "v1"
    metadata:
      name: "${SERVICE_NAME}"
      labels:
        app: "${APP}"
        service: "${SERVICE_NAME}"
    spec:
      ports:
        - name: "${SERVICE_NAME}"
          protocol: "TCP"
          port: 8080
          targetPort: 8080
      selector:
        name:  "${SERVICE_NAME}"
      type: "ClusterIP"
      sessionAffinity: "None"

  - kind: Route
    apiVersion: v1
    id: ${SERVICE_NAME}
    metadata:
      annotations:
        description: Route for application's http service.
      labels:
        app: ${APP}
        service: "${SERVICE_NAME}"
      name: ${SERVICE_NAME}
    spec:
      to:
        kind: "Service"
        name: "${SERVICE_NAME}"
