#!groovy
// Not done yet !!!!!!

pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage("Maven-Agent") {
            steps {
                script {
                    def revisions = buildRevisionsForBranches()
                    cleanupObsoleteDeployments(revision)
                }
            }
        }
    }
}

def cleanupObsoleteDeployments(List<String> revisions = []) {
    def obsoleteDeployments = filterOutObsoleteDeployments(revision)
    for (deployment in obsoleteDeployments) {
        deleteOcpApp(deployment, "version=${deployment}", true)
    }
}

def buildRevisionsForBranches() {
    sh 'git fetch --all'
    def gitPath = "refs/remotes/origin/"
    def revisions = []
    def scriptResult = sh script: "git for-each-ref --format='%(refname)'  ${gitPath}", returnStdout: true
    for (branch in scriptResult.split("\\n")) {
        if (branch != null && !branch.isEmpty()) {
            revisions.add(buildRevisionForBranch(branch.replace(gitPath, "")))
        }
    }

    return revisions
}

def filterOutObsoleteDeployments(List<String> revisions = []) {
    def frontendDeploymentPrefix = "mega-zep-frontend"
    def backendDeploymentPrefix = "mega-zep-backend"
    def deployments = []
    def scriptResult = sh script: "oc get dc -o jsonpath='{ .items..metadata.name }' --selector version=mega-zep-bakend-feature-ocp-builds", returnStdout: true
    for (deployment in scriptResult.split(" ")) {
        def revision = deployment.replace(frontendDeploymentPrefix, "").replace(backendDeploymentPrefix, "")
        if (!revisions.contains(revision)) {
            deployments.add(revision)
        }
    }

    return deployments
}

def deleteOcpApp(String ocpApp, String selector, boolean wait = false) {
    sh "oc delete all --selector ${selector} --ignore-not-found=true \
        && oc delete is/${ocpApp} --ignore-not-found=true"
    if (wait) {
        def removed = false;
        timeout(time: 33, unit: "SECONDS") {
            while (!removed) {
                removed = !openshift.selector("dc", ocpApp).exists() \
                                        && !openshift.selector("svc", ocpApp).exists() \
                                        && !openshift.selector("is", ocpApp).exists() \
                                        && !openshift.selector("route", ocpApp).exists()
                if (!removed) {
                    sleep time: 1, unit: "SECONDS"
                }
            }
        }
        if (!removed) {
            error "Could not delete application"
        }
    }
}

def buildRevisionForBranch(String branch = "", String pomLocation = "./") {
    branch = branch.trim().toLowerCase()
    def revision = "";
    if (branch.equals("develop") || branch.equals("master")) {
        pom = readMavenPom file: pomLocation + 'pom.xml'
        return pom.properties['revision']
    } else if (branch.startsWith("feature/")) {
        return branch.replace("/", "-").toLowerCase()
    } else if (branch.startsWith("pr-")) {
        return branch.replace("/", "-").toLowerCase()
    } else if (branch.startsWith("release/") || branch.startsWith("hotfix/")) {
        pom = readMavenPom file: pomLocation + 'pom.xml'
        return pom.properties['revision'].toLowerCase()
    } else {
        error("Branch not detected. branch=${branch}")
    }
}