#!groovy
package build

pipeline {
    agent any

    environment {
        REVISION = buildRevisionForBranch('./mega-zep-backend')
        // POD must have' max_limits * 2' regarding memory
        NODE_RESOURCE_LIMITS = "--initial-old-space-size=4096 --max-old-space-size=4096"
    }

    parameters {
        booleanParam(name: 'deployToDev', defaultValue: 'false', description: 'True if the build shall be deployed to dev')
    }

    options {
        disableConcurrentBuilds()
        parallelsAlwaysFailFast()
    }

    stages {
        stage("Build") {
            parallel {
                stage('frontend') {
                    agent {
                        kubernetes {
                            cloud 'openshift'
                            yamlFile "./jenkins/src/build/nodejs-build-pod.yaml"
                        }
                    }
                    stages {
                        stage('Build Artefakt') {
                            steps {
                                script {
                                    container('nodejs') {
                                        dir('mega-zep-frontend/src/main/angular/frontend') {
                                            sh "npm install"
                                            sh "node ${NODE_RESOURCE_LIMITS} \
                                                     ./node_modules/@angular/cli/bin/ng \
                                                     test --browsers=ChromeHeadlessNoSandbox --watch=false"
                                            sh "node ${NODE_RESOURCE_LIMITS} \
                                                     ./node_modules/@angular/cli/bin/ng build \
                                                     --configuration=production"
                                        }
                                    }
                                }
                            }
                        }
                        stage('Build Image') {
                            steps {
                                script {
                                    container('nodejs') {
                                        dir('mega-zep-frontend/src/main/angular/frontend') {
                                            openshift.withCluster() {
                                                sh "oc start-build mega-zep-frontend --commit=${env.GIT_COMMIT} \
                                                                                         --from-dir=dist/frontend \
                                                                                         --follow \
                                                                                         --wait"
                                                openshift.tag("mega-zep-frontend:latest", "mega-zep-frontend:${env.REVISION}")
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage("Push Image") {
                            steps {
                                script {
                                    container('nodejs') {
                                        copyImage("mega-zep-frontend:${env.REVISION}")
                                    }
                                }
                            }
                        }
                    }
                }

                stage('backend') {
                    agent {
                        kubernetes {
                            cloud 'openshift'
                            yamlFile "./jenkins/src/build/openjdk-11-build-pod.yaml"
                        }
                    }
                    stages {
                        stage('Build Artefakt') {
                            steps {
                                script {
                                    container('quarkus') {
                                        withCredentials([file(credentialsId: 'jenkins-mega', variable: 'FILE')]) {
                                            dir('mega-zep-backend') {
                                                sh "cp -f ${FILE} ./.env"
                                                sh "mvn -B -s ${WORKSPACE}/jenkins/src/build/jenkins-settings.xml \
                                                        clean compile install \
                                                        -Drevision=${env.REVISION} \
                                                        -Dquarkus.package.uber.jar=true"
                                                jacoco(execPattern: 'target/*.exec',
                                                        classPattern: 'target/classes',
                                                        sourcePattern: 'src/main/java',
                                                        sourceExclusionPattern: 'src/test/java',
                                                        exclusionPattern: '**/provantis/**,**/AutoValue_*')
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        stage('Build Image') {
                            steps {
                                script {
                                    container('quarkus') {
                                        dir('mega-zep-backend/target/') {
                                            openshift.withCluster() {
                                                def artifact = "mega-zep-backend-${env.REVISION}-runner.jar"
                                                sh "oc start-build mega-zep-backend --from-file=${artifact} --follow --wait"
                                                openshift.tag("mega-zep-backend:latest", "mega-zep-backend:${env.REVISION}")
                                            }
                                            copyImage("mega-zep-backend:${env.REVISION}")
                                        }
                                    }
                                }
                            }
                        }
                        stage("Push Image") {
                            steps {
                                script {
                                    container('quarkus') {
                                        copyImage("mega-zep-backend:${env.REVISION}")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy DEV') {
            when {
                anyOf {
                    branch "develop"
                    expression {
                        return params.deployToDev
                    }
                }
            }
            steps {
                script {
                    build job: 'mega-release', parameters: [
                            string(name: 'Branch', value: "master"),
                            string(name: 'target', value: "dev"),
                            string(name: 'stage', value: "default"),
                            string(name: 'version', value: "${env.REVISION}")]
                }
            }
        }
    }

    post {
        failure {
            script {
                emailext attachLog: true,
                        recipientProviders: [
                                [$class: 'DevelopersRecipientProvider'],
                                [$class: 'RequesterRecipientProvider']
                        ],
                        subject: "MEGA Jenkions Job ${env.JOB_NAME}#${env.BUILD_NUMBER} failed",
                        body: """
Build for Branch '${env.GIT_BRANCH}@${env.GIT_COMMIT}' has failed.

Please see ${env.RUN_DISPLAY_URL} for further details
"""
            }
        }

        fixed {
            script {
                emailext attachLog: true,
                        recipientProviders: [
                                [$class: 'DevelopersRecipientProvider'],
                                [$class: 'RequesterRecipientProvider']
                        ],
                        subject: "MEGA Jenkions Job ${env.JOB_NAME}#${env.BUILD_NUMBER} fixed",
                        body: """
Build for Branch '${env.GIT_BRANCH}@${env.GIT_COMMIT}' has been fixed.
"""
            }
        }
    }
}

def copyImage(String sourceImageTag, String targetImageTag = sourceImageTag) {
    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh "skopeo copy --src-tls-verify=false \
                    --dest-tls-verify=false \
                    --src-creds openshift:\$(oc whoami -t) \
                    --dest-creds=${USERNAME}:${PASSWORD} \
                    docker://docker-registry.default.svc:5000/57-mega-dev/${sourceImageTag} \
                    docker://registry.hub.docker.com/${USERNAME}/${targetImageTag}"
    }
}

def buildRevisionForBranch(String pomLocation = ".") {
    String branch = "${env.GIT_BRANCH}"
    if (branch == "develop") {
        pom = readMavenPom file: pomLocation + '/pom.xml'
        return pom.properties['revision']
    } else if (branch.startsWith("feature/")) {
        return branch.replace("/", "-").toUpperCase()
    } else if (branch.startsWith("release/") || branch.startsWith("hotfix/")) {
        return branch.replace("release/", "").replace("hotfix/", "")
    } else {
        error("Cannot caluclate version for branch=${branch}")
    }
}