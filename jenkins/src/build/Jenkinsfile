#!groovy

pipeline {
    agent any

    environment {
        OCP_PROJECT_NAME = "57-mega-dev"
        OCP_ROUTE_SUFFIX = "${OCP_PROJECT_NAME}.cloud.itandtel.at"
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Stash') {
            steps {
                stash name: "repo", includes: '**'
            }
        }

        stage("Build/Deploy") {
            parallel {
                stage('frontend') {
                    steps {
                        script {
                            podTemplate(cloud: 'openshift', name: 'nodejs-build-agent', label: 'nodejs-build-agent', serviceAccount: 'jenkins', containers: [
                                    containerTemplate(name: 'nodejs-container', image: 'docker-registry.default.svc:5000/57-mega-dev/nodejs-build-agent:latest',
                                            ttyEnabled: true, command: 'cat', alwaysPullImage: true, resourceRequestCpu: "1000m", resourceRequestMemory: "1Gi")
                            ]) {
                                node('nodejs-build-agent') {
                                    container('nodejs-container') {
                                        unstash name: "repo"

                                        def revision = buildRevisionForBranch()

                                        dir('mega-zep-frontend/src/main/angular/frontend') {
                                            sh "npm install"
                                            sh "npx ng test --browsers=ChromeHeadlessNoSandbox --watch=false"
                                            sh "npx ng build --configuration=production"
                                        }

                                        dir('mega-zep-frontend/src/main/angular/frontend') {
                                            openshift.withCluster() {
                                                sh "oc start-build mega-zep-frontend --commit=${env.GIT_COMMIT} \
                                                                                         --from-dir=dist/frontend \
                                                                                         --follow \
                                                                                         --wait"
                                                openshift.tag("mega-zep-frontend:latest", "mega-zep-frontend:${revision}")
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                stage('backend') {
                    steps {
                        script {
                            podTemplate(cloud: 'openshift', name: 'quarkus-build-agent', label: 'quarkus-build-agent', serviceAccount: 'jenkins', containers: [
                                    containerTemplate(name: 'quarkus-container', image: 'docker-registry.default.svc:5000/57-mega-dev/quarkus-build-agent:latest', ttyEnabled: true, command: 'cat', alwaysPullImage: true,
                                            resourceRequestCpu: "1000m", resourceRequestMemory: "1Gi")
                            ],
                                    volumes: [
                                            persistentVolumeClaim(claimName: 'jenkins-mvn-repo-cache', mountPath: '/home/jenkins/.m2/repository')
                                    ]) {
                                node('quarkus-build-agent') {
                                    container('quarkus-container') {
                                        unstash name: "repo"

                                        def revision = buildRevisionForBranch()

                                        withCredentials([file(credentialsId: 'mega-secrets', variable: 'FILE')]) {
                                            sh "mkdir -p ./mega-zep-backend/config"
                                            sh "cp -f ${FILE} ./mega-zep-backend/config/application.properties"
                                            sh "mvn -B -s jenkins-settings.xml \
                                                   install \
                                                   -Drevision=${revision} \
                                                   -Dquarkus.package.uber.jar=true"
                                        }

                                        dir('mega-zep-backend/target/') {
                                            openshift.withCluster() {
                                                def artifact = "mega-zep-backend-${revision}-runner.jar"

                                                sh "oc start-build mega-zep-backend --from-file=${artifact} --follow --wait"
                                                openshift.tag("mega-zep-backend:latest", "mega-zep-backend:${revision}")
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

def buildRevisionForBranch(String pomLocation = "./") {
    def branch = "${env.GIT_BRANCH}".trim().toLowerCase()
    def revision = "";
    if (branch.equals("develop")) {
        pom = readMavenPom file: pomLocation + 'pom.xml'
        return pom.properties['revision']
    } else if (branch.startsWith("feature/")) {
        return branch.replace("/", "-").toUpperCase()
    } else if (branch.startsWith("pr-")) {
        return branch.replace("/", "-").toUpperCase()
    } else if (branch.startsWith("release/") || branch.startsWith("hotfix/")) {
        pom = readMavenPom file: pomLocation + 'pom.xml'
        return pom.properties['revision']
    } else {
        error("Branch not detected. branch=${branch}")
    }
}