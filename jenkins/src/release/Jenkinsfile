#!groovy

pipeline {
    agent any

    parameters {
        choice(name: 'environment', choices: ['dev', 'test', 'prod'], description: 'The environment to deploy to')
        string(name: 'version', defaultValue: 'latest', description: 'The image version to release', trim: true)
    }

    environment {
        MEGA_PROJECT = "57-mega-"
        PROD_PROJECT = "57-services"
        TARGET_PROJECT = "${params.environment.equals('prod') ? env.PROD_PROJECT : (env.MEGA_PROJECT + params.environment)}"
        OCP_ROUTE_SUFFIX = "${env.TARGET_PROJECT}.cloud.itandtel.at"
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Copy-Image') {
            when {
                expression { params.environment.equals("prod") }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("${env.TARGET_PROJECT}") {
                            openshift.tag("57-mega-dev/mega-zep-frontend:${params.version}", "${env.TARGET_PROJECT}/mega-zep-frontend:${params.version}")
                            openshift.tag("57-mega-dev/mega-zep-backend:${params.version}", "${env.TARGET_PROJECT}/mega-zep-backend:${params.version}")
                        }
                    }
                }
            }
        }

        stage("Release") {
            parallel {
                stage("Fronted") {
                    steps {
                        script {
                            dir('ocp/templates') {
                                openshift.withCluster() {
                                    openshift.withProject("${env.TARGET_PROJECT}") {
                                        recreateServiceResources("mega-zep-frontend",
                                                params.environment,
                                                "--param=IMAGE_STREAM_TAG='mega-zep-frontend:${params.version}'")
                                    }
                                }
                            }
                        }
                    }
                }

                stage("Backend") {
                    steps {
                        script {
                            dir('ocp/templates') {
                                openshift.withCluster() {
                                    openshift.withProject("${env.TARGET_PROJECT}") {
                                        def frontendProps = readServiceProperties("mega-zep-fronted", params.environment)
                                        def service = "https://${frontendProps.NAME}-${env.OCP_ROUTE_SUFFIX}"
                                        recreateServiceResources("mega-zep-backend",
                                                params.environment,
                                                "--param=JAVA_OPTIONS='-Djava.net.preferIPv4Stack=true -Dquarkus.http.cors.origins=${service}",
                                                "--param=IMAGE_STREAM_TAG='mega-zep-backend:${params.version}'")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

def recreateServiceResources(String service, String stage = "", String additionalParams = '') {
    if (stage != "") {
        stage = "." + stage
    }
    def processedYaml = "${service}.processed.yaml"
    sh "oc process --filename ${service}.yaml \
                   --param-file=${service}${stage}.properties ${additionalParams} \
                   --output yaml \
                   > ${processedYaml} \
        && oc delete --ignore-not-found \
                     --filename ${processedYaml} \
        && oc create --filename ${processedYaml}"
}

def readServiceProperties(String service, String path = ".", String stage = "") {
    if (stage != "") {
        stage = "." + stage
    }
    def props = readProperties file: "${path}/${service}${stage}.properties"
    return props
}

